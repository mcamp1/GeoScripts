NAME,DESCRIPTION,TYPE,SUBTYPE,FIELD,ISEDITABLE,TRIGGERINSERT,TRIGGERDELETE,TRIGGERUPDATE,SCRIPTEXPRESSION,ERRORNUMBER,ERRORMESSAGE,EXCLUDECLIENTEVALUATION,ISENABLED,BATCH,SEVERITY,TAGS,CATEGORY,CHECKPARAMETERS
Required Fields,Required fields for dmu.,CONSTRAINT,,,True,True,False,True,"if ($feature.paragraphstyle == 'Heading')
{
 if($feature.name==null||$feature.name==""""){return{""errorMessage"":""name is required.""};}
 if($feature.description==null||$feature.description==""""){return{""errorMessage"":""description is required.""};}
 if($feature.datasourceid==null||$feature.datasourceid==""""){return{""errorMessage"":""DataSourceID is required.""};}
} 
else
{
 if($feature.mapunit==null||$feature.mapunit==""""){return{""errorMessage"":""mapunit is required.""};}
 if($feature.name==null||$feature.name==""""){return{""errorMessage"":""name is required.""};}
 if($feature.fullname==null||$feature.fullname==""""){return{""errorMessage"":""fullname is required.""};}
 if($feature.age==null||$feature.age==""""){return{""errorMessage"":""age is required.""};}
 if($feature.areafillrgb==null||$feature.areafillrgb==""""){return{""errorMessage"":""areafillrgb is required.""};}
 if($feature.geomaterial==null||$feature.geomaterial==""""){return{""errorMessage"":""geomaterial is required.""};}
 if($feature.geomaterialconfidence==null||$feature.geomaterialconfidence==""""){return{""errorMessage"":""geomaterialconfidence is required.""};}
 if($feature.datasourceid==null||$feature.datasourceid==""""){return{""errorMessage"":""DataSourceID is required.""};}
}
return true;",100,Required field is missing.,False,True,False,,,0,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Validate Hierarchy Key,Validate Hierarchy Key,CONSTRAINT,,,True,True,False,True,"// Don't worry about empty values for now
if ($feature.hierarchykey == null) return true;
// Split string by '-'
var splitArray = Split($feature.hierarchykey , '-', -1, 0);
// Loop over array
for (var index in splitArray)
{
    // Try casting string-key as a number
    var castAsNumber = Number(splitArray[index]);
    // Error if not a number
    if (IsNan(castAsNumber)) return   {""errorMessage"": ""Map Unit must have a valid Hierarchy Key.""};
}
return true;",100,Invalid Hierarchy Key.,False,True,False,,,0,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Validate AreaFillRGB,Validate AreaFillRGB,CONSTRAINT,,,True,True,False,True,"if ($feature.paragraphstyle == 'Heading' && $feature.areafillrgb == null) return true;
var rgb = $feature.areafillrgb;
// Check there are commas in the right places
if (Find(',', rgb, 0) != 3) return false;
if (Find(',', rgb, 6) != 7) return false;
if (Find(',', rgb, 8) != -1) return false;
// Compare the left 11 digits to the right 11 digits. Should be equal.
if (Right(rgb, 11) != Left(rgb, 11)) return false;
// Check that the numbers are valid
var firstNumber = Number(Left(rgb,3));
if(isNan(firstNumber) || firstNumber < 0 || firstNumber > 255) return false;
var secondNumber = Number(Mid(rgb,4,3));
if(isNan(secondNumber) || secondNumber < 0 || secondNumber > 255) return false;
var thirdNumber = Number(Right(rgb,3));
if(isNan(thirdNumber) || thirdNumber < 0 || thirdNumber > 255) return false;
return true;",100,Invalid RGB value.,False,True,False,,,0,"{""type"":""PropertySet"",""propertySetItems"":[]}"
