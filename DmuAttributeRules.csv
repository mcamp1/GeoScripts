NAME,DESCRIPTION,TYPE,SUBTYPE,FIELD,ISEDITABLE,TRIGGERINSERT,TRIGGERDELETE,TRIGGERUPDATE,SCRIPTEXPRESSION,ERRORNUMBER,ERRORMESSAGE,EXCLUDECLIENTEVALUATION,ISENABLED,BATCH,SEVERITY,TAGS,CATEGORY,CHECKPARAMETERS
Calculate HexColor from RGB,Converts the GeMS rgb to hex,CALCULATION,,hexcolor,False,True,False,True,"if ($feature.paragraphstyle == 'Heading') return """";

var rgb = $feature.areafillrgb;

var firstNumber = ToHex(Left(rgb,3));
var secondNumber = ToHex(Mid(rgb,4,3));
var thirdNumber = ToHex(Right(rgb,3));

return Concatenate([""#"",firstNumber,secondNumber,thirdNumber], '');",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Heading Required Fields,Required field for DMU Headings.,CONSTRAINT,,,True,True,False,True,"if ($feature.paragraphstyle == 'Heading')
{
    if ($feature.name == null) return {""errorMessage"": ""Heading must have a name.""};
    else if ($feature.description == null) return {""errorMessage"": ""Heading must have a description.""};
}
return true;",100,Heading missing required fields.,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Standard Required Fields,Required fields for Standard DMUs.,CONSTRAINT,,,True,True,False,True,"if ($feature.paragraphstyle == 'Standard')
{
    if ($feature.mapunit == null) return {""errorMessage"": ""Map unit is required.""};
    else if ($feature.name == null) return {""errorMessage"": ""Name is required.""};
    else if ($feature.fullname == null) return {""errorMessage"": ""Full name is required.""};
    else if ($feature.age == null) return {""errorMessage"": ""Age is required.""};
    else if ($feature.areafillrgb == null) return {""errorMessage"": ""Areafillrgb is required.""};  
    else if ($feature.geomaterial == null) return {""errorMessage"": ""Geomaterial is required.""};        
    else if ($feature.geomaterialconfidence == null) return {""errorMessage"": ""Geomaterial confidence is required.""};    
}
return true;",100,Map unit missing required fields.,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Validate Hierarchy Key,Validate Hierarchy Key,CONSTRAINT,,,True,True,False,True,"// Don't worry about empty values for now
if ($feature.hierarchykey == null) return true;
// Split string by '-'
var splitArray = Split($feature.hierarchykey , '-', -1, 0);
// Loop over array
for (var index in splitArray)
{
    // Try casting string-key as a number
    var castAsNumber = Number(splitArray[index]);
    // Error if not a number
    if (IsNan(castAsNumber)) return   {""errorMessage"": ""Map Unit must have a valid Hierarchy Key.""};
}
return true;",100,Invalid Hierarchy Key.,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Validate AreaFillRGB,Validate AreaFillRGB,CONSTRAINT,,,True,True,False,True,"if ($feature.paragraphstyle == 'Heading' && $feature.areafillrgb == null) return true;

var rgb = $feature.areafillrgb;

// Check there are commas in the right places
if (Find(',', rgb, 0) != 3) return false;
if (Find(',', rgb, 6) != 7) return false;
if (Find(',', rgb, 8) != -1) return false;

// Compare the left 11 digits to the right 11 digits. Should be equal.
if (Right(rgb, 11) != Left(rgb, 11)) return false;

// Check that the numbers are valid
var firstNumber = Number(Left(rgb,3));
if(isNan(firstNumber) || firstNumber < 0 || firstNumber > 255) return false;

var secondNumber = Number(Mid(rgb,4,3));
if(isNan(secondNumber) || secondNumber < 0 || secondNumber > 255) return false;

var thirdNumber = Number(Right(rgb,3));
if(isNan(thirdNumber) || thirdNumber < 0 || thirdNumber > 255) return false;

return true;",100,Invalid RGB value.,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
